%meta{encoding: "utf-8"}
%title Visualising Data Using Javascript
%link{href:"css/normalise.css",rel:"stylesheet"}
%link{href:"css/screen.css",rel:"stylesheet"}
%link{href:"css/prettify.css",rel:"stylesheet"}
%script{src:"underscore.js"}
%script{src:"d3.js"}
%script{src:"treemap.js"}

:javascript
  function pluck(v) {
    var args = [].slice.call(arguments,1);
    return function(d) {
      return typeof(d[v]) === "function" ? d[v].apply(d,args) : d[v];
    }
  }

  function I(x) { return x }

  function px(fn) {
    return function() {
      return fn.apply(null,arguments) + "px"
    }
  };

  var onPageCbs = [];
  var onPage = function (page,fn) {
    onPageCbs.push([page,fn])
  }

  function revealCode(id,fn) {
    var el = document.getElementById(id); 
    fn || (fn = function(code,script,page) {
      page.appendChild(script);
    });
    // first script
    var script = el.querySelector("script");
    var code = script.innerText
      .split("\n")
      .slice(3) // remove cdata & onPage
      .slice(0,-3) // remove cdata & onPage
      .map(function(s) { return s.replace(/^    /,"") }).join("\n");
    var pre = document.createElement("pre");
    pre.innerText = code;
    fn(code,pre,el); 
    prettyPrint();
  }

  var peeks = 0;
  function peek(fn,name) {
    name || (name = "peek" + (++peeks));
    return function() {
      console.log(name,arguments);
      return fn.apply(null,arguments);
    }
  }

%section
  %h1 Visualising Data Using Javascript
  %h2
    Tim Ruffles - 
    %a{href:"https://www.sidekickjs.com"} SidekickJS
  %h3{class:"twitter"}
    %a{href:"https://twitter.com/timruffles"} @timruffles


%section#intro-venn

  %h2#covering
    We'll be covering
  #venn


  %style
    :sass
      #venn
        font-size: 0.35em
      #covering
        float: right
        width: 30%



  :javascript
    onPage("intro-venn",_.once(function() {

    var data = [
      {
        name: "Data",
        children: [
          { name: "d3.scale" },
          { name: "d3 array methods" },
          { name: "d3 data loaders" },
          { name: "unix" },
          { name: "Google spreadsheet" },
        ]
      },
      {
        name: "Documents",
        children: [
          { name: "DOM" },
          { name: "SVG" },
          { name: "three.js" },
        ]
      },
      {
        name: "Design",
        children: [
          { name: "Colour" },
          { name: "d3.layout" },
          { name: "Principles" },
          { name: "Process" }
        ]
      }
    ];

    data.forEach(function(d) {
      d.children.forEach(function(c) {
        c.parent = d;
      });
    });

    var plucker = function(v) {
      return function(o) {
        return o[v];
      }
    };
    var translate = function(x,y) {
      return "translate(" + x + "," + y + ")";
    };

    var venn = function(opts) {

      var data = opts.data;
      var spread = opts.spread;
      var width = opts.width;
      var height = opts.height;
      var radius = opts.radius;
      var center = {x:width/2,y:height/2};

      var sin = Math.sin;
      var cos = Math.cos;
      var PI = Math.PI;

      var radsPerSegment = Math.PI * 2 / data.length;

      var segment = d3.scale.ordinal().range(["#AB00D9","#FFF600","#009EEF"]).domain(d3.range(0,data.length - 1));

      var g = d3.select("#venn")
                .append("svg")
                .attr("width",width)
                .attr("height",height)
                .append("g");

      var venn = g.selectAll("circle")
                  .data(data);

      var segmentAngle = function(i) {
        var verticalZero = 0.5 * Math.PI;
        return (i * radsPerSegment) - verticalZero;
      };

      var enter = venn.enter()
        .append("g")
        .attr("transform",function(d,i) {
          var centerRadius = radius - spread;
          var x = cos(segmentAngle(i)) * centerRadius + center.x;
          var y = sin(segmentAngle(i)) * centerRadius + center.y;
          return translate(x,y);
        });

      enter.append("svg:circle")
        .style("fill",function(d,i) {
          return segment(i)
        })
        .attr("opacity",0.6)
        .attr("r",radius)
        .on("mouseover",function() {
          d3.select(this).transition().attr("r",radius + 5);
        })
        .on("mouseout",function() {
          d3.select(this).transition().attr("r",radius);
        })
        ;

      enter.append("svg:text")
        .text(plucker("name"))
        .attr("transform",function(d,i) {
          return translate(-this.offsetWidth/2,this.offsetHeight/2);
        });
      ;

      enter
        .selectAll("text.children")
        .data(plucker("children"))
        .enter()
        .append("g")
          .attr("transform",function(d,i) {
            var pindex = data.indexOf(d.parent);
            var start = segmentAngle(pindex) - radsPerSegment / 2;
            var end = segmentAngle(pindex) + radsPerSegment / 2;
            var anglePerCategory = (end - start) / d.parent.children.length;
            var angle = i * anglePerCategory + (anglePerCategory / 2) + start;
            var textRadius = radius + 10;
            d.angleRadians = angle;
            return translate(cos(angle) * textRadius,sin(angle) * textRadius) + " rotate(" + angle * 57.2957795 + ")";
          })
          .append("text")
          .text(plucker("name"))
          .attr("transform",function(d) {
            var piRads = d.angleRadians / PI;
            if((piRads < -0.5 && piRads >= -1) || (piRads >= 0.5 && piRads < 1.5)) {
              return "matrix(-1,0,0,-1," + this.clientWidth + ",0)";
            } 
            return "";
          });


    };

    venn({
      data: data,
      spread: 15,
      width: 800,
      height: 800,
      radius: 120,
    });

    }));

%section
  %h2 On the menu for today

  %ul#menu
    %li d3: what & why
    %li Selecting elements
    %li Binding data
    %li Scales
    %li Layouts
    %li Questions
    %li Creating your visualisations

  :javascript
    var data = [0.1,0.1,0.1,0.1,0.1,0.2,0.5];

    var colors = d3.scale.linear().domain([0,data.length - 1]).range(["#69C7FF","#ff0000"])
    var width  = d3.scale.linear().domain([0,0.5]).range(["0%","100%"]);

    d3.select("#menu").selectAll("li").data(data)
      .append("div")
      .style("width",function(d) { return width(d) })
      .style("height","16")
      .style("background",function(d,i) { return colors(i) });

%section.subtitle
  %h2 d3: what &amp; why of d3

%section
  %h2 What - comparison

  #demo1
    .controls
      %h2 Best at
      .radios
    .graphs


  :javascript
    var data = [
      {"name":"jquery", data: [["dom",1], ["svg",0], ["data",0], ["open",0.7 ]]},
      {"name":"d3", data: [ ["dom",0.6], ["svg",1], ["data",1], ["open",1 ]]},
      {"name":"highcharts", data:[ ["dom",0], ["svg",0.1], ["data",0.6], ["open",0 ]]},
      {"name":"raphael", data: [["dom",0], ["svg",1], ["data",0], ["open",0.5 ]]},
      {"name":"processing", data:[ ["dom",0], ["svg",0], ["data",0.5], ["open",0.2 ]]}
    ];

    var titles = {
      open: "Uses existing APIs",
      dom: "DOM tools",
      svg: "SVG tools",
      data: "Facilities for working with data"
    };

    var reorder;
    // selection behaviour
    var cats = data[0].data.map(function(d,i) { return { name: d[0], selected: i === 0 } });

    var radios = d3.select("#demo1 .radios").selectAll("radio").data(cats).enter()
      .append("label");

      radios.append("input").attr("name","sort").attr("value",pluck("name")).attr("type","radio").on("change",function(data) {
        _.each(cats,function(c) { c.selected = false });
        data.selected = true;
        reorder();
      });
      document.querySelector("#demo1 input[value=dom]").checked = true;
      radios.append("span").text(function(d) { return titles[d.name] });
      

    _.each(data,function(d) {
      d.dict = _.reduce(d.data,function(h,kv) {
        h[kv[0]] = kv[1];
        return h;
      },{});
    });

    var getSelected = function() { for(var c in cats) if(cats[c].selected) return cats[c] };

    reorder = function() {
      var selected = getSelected().name;
      data = _.sortBy(data,function(d) {
        return -d.dict[selected];
      });
      render();
    };

    var render = function() {

      var sections = d3.select("#demo1 .graphs").selectAll("div");

      var bound = sections.data(data,pluck("name"));

      // update
      bound.style("top",function(d,i) {
        return i * 128 + "px";
      });

      var enter = bound.enter()
                    .append("div")
                    .style("top",function(d,i) {
                      return i * 128 + "px";
                    })
                    .classed("data-framework",true)
                    ;

      enter.append("h2")
          .text(pluck("name"))

          ;

      var colors = d3.scale.category10();
      var height = d3.scale.linear().domain([0,1]).range([1,600]);

      var divs = enter.append("div")
        .classed("graph",true)
        .selectAll("div")
        .data(pluck("data"));
            
      divs.enter().append("div")
        .text(pluck(0))
        .attr("class",pluck(0))
        .style("background",function(d,i) { return colors(i) })
        .style("width",_.compose(height,pluck(1)));


    };

    reorder();

  %style
    :sass
      #demo1
        position: relative
        font-size: 0.25em
        overflow: auto
        .data-framework
          -webkit-transition: all 0.5s
          position: absolute
        h2
          text-align: left
          margin: 0 0 0.5em 0
        .graphs
          margin-left: 2em
          width: 40%
          height: 100%
        .graph
          float: left
          margin-bottom: 1em
        .data-framework
          overflow: auto
        .controls
          float: left
          width: 38%
          margin-left: 10%
          h2
            font-size: 3em
        .graphs
          float: left
          width: 48%
        label
          display: block
          font-size: 2em
          line-height: 2em
          cursor: pointer
        input
          margin-right: 2em

%section
  %h2 Philosophy

  %p Don't invent a propritatory API - use SVG, HTML. You'll see 'g' elements just like in SVG, not new names for old things (eg jQuery - `dataType` not `responseType`).

  %p Toolkit for visualisations, not lots of prebaked ones.

  %p Definitely not a charting library.

%section
  %h2 Why

  %p Not propriatory - you can use what you learn about SVG, HTML and CSS everywhere.

  %p Mobile friendly (HTML everywhere, SVG iOS, Android Browser 3.0+).

  %p Less to learn - not a big scary black box.

%section.subtitle
  %h2 Selecting elements

%section
  %h2 API

  %pre
    :preserve
      d3.select("body")
        .append("h2")
        .text("foo")
        .transition()
          .style("color","red");

      d3.select("p")
        .style("font-size","2em")
        .append("span")
          .text("I'm a span in a paragraph");

%section
  %h2 Chaining

  %p Just like jQuery, we can keep calling methods on the same elements.

  %p If we create new elements via append, the context of our chain becomes the new elements.

  %p Use `transition` to apply changes over time.

%section
  %h2 Context

  %p We need to be aware of which elements we're talking about

  %pre
    :preserve
      // results in &lt;h2&gt;&lt;a&gt;&lt;span&gt;&lt;/span&gt;&lt;/a&gt;&lt;/h2&gt;
      d3.select("body")
        .append("h2") // now we're in context of h2
        .append("a") // so a ends up inside h2
        .append("span"); // and span inside a

      // results in &lt;h2&gt;&lt;a&gt;&lt;/a&gt;&lt;span&gt;&lt;/span&gt;&lt;/h2&gt;
      var h2 = d3.select("body")
        .append("h2");
      h2.append("a");
      h2.append("span");



%section
  %h2 Events

  %pre
    :preserve
      d3.selectAll("input")
        .on("change",function(data,index) {
          // event handler
        });

  %p Again, very similar to jQuery, `this` being DOM element.
  %p `d3.event` holds current event
  %p `this` for target DOM node

%section.subtitle
  %h2 Code: selecting elements

%section.subtitle

  %h2 What are `data` and `index` doing where `event` is normally...?

%section.subtitle
  %h2 We need to talk about data

%section#data-demo
  %h2 Data

  %ul

  :javascript
    onPage("data-demo",function() {
      var sections = d3.select("#data-demo ul")
        .selectAll("li")
        .data([
          "d3 gets data in front of users by binding it to elements.",
          "You can then use it to dynamically setup attributes *",
          "It'll be passed to your event handers"
        ])
        .enter()
          .append("li")
          .style("opacity",0)
          .text(function(d) { return d }) // * dynamic
          .transition()
          .delay(function(d,i) { return i * 1000 })
          .style("opacity",1)
    });

  :javascript
    onPage("data-demo",function() {
      setTimeout(function() {
        revealCode("data-demo") 
      },3500);
    });

%section
  %h2 Joins

  %p In the code for the comparison, before we have any data we select all divs.

  %p Why are we binding to elements that don't exist?

  %pre
    :preserve
      var sections = d3.select("#demo1")
        .append("div")
        .classed("graphs",true)
        .selectAll("div")

  %p Why isn't this a waste of time?


%section#change
  %h2 Reflecting change

  %p Three types - new data, change in values, data leaving

  #change-demo

  %button#change-btn
    Change

  :javascript
    onPage("change",function() {
    var draw = function() {
      var root = d3.select("#change-demo")

      var colors = d3.scale.linear().domain([-2,2]).range(["#FF0000","#0000FF"]);

      var s = root.selectAll("div").data(d3.range(Math.round(Math.random()  * 10)).map(d3.random.normal()));

      // update method
      s.transition()
        .style("color",function(d)  { return colors(d) })
        .text(I);

      // data without elements
      s.enter()
          .append("div")
          .style({opacity: 0})
          .text(I)
          .transition()
            .delay(function(d,i) { return i * 250 })
            .style("color",function(d)  { return colors(d) })
            .style({opacity: 1})

      // elements without data
      s.exit()
          .transition()
          .delay(function(d,i) { return i * 250 })
          .style({opacity: 0})
          .remove();
    }
    d3.select("#change-btn").on("click",draw);
      draw();
    });

  :javascript
    onPage("change",function() {
      setTimeout(function() {
        revealCode("change") 
      },2500);
    });

%section
  %h2 Update

  %p You're setting rules for updates as soon as you bind data

  %p Updates apply when you have both an element and a datum

  %p Rerun the selection when adding data, attributes will be updated

  %p Use transitions to move smoothly to the new values

  %pre
    :preserve
      var update = d3.selectAll("div") // 1 div
        .data([1,2,3,4])
        // will act on the first div, passing 1
        .text(function(d) { 
          return "I'm updating " + 1 // I'm updating 1
         }) 

%section
  %h2 Enter

  %p New data that doesn't fit into the current selection goes into enter

  %p eg:

  %pre
    :preserve
      var update = d3.selectAll("div") // 1 div
        .data([1,2,3,4])

      var enter = update.enter() // will act on [2,3,4], appending 3 divs
        .append("div") 

%section
  %h2 Exit

  %p Elements that no longer have a datum will go into exit

  %p eg:

  %pre
    :preserve
      var update = d3.selectAll("div") // 5 divs
        .data([1])

      var exit = update.exit() // will affect the other 4 divs, removing them
        .remove()

%section
  %h2 Join demo
  
  #join-demo

    <div class=els>
    <h2>Situation</h2>

    <h3>Elements</h3>
    <button class=addEl>Add element</button>
    <button class=removeEl>Remove element</button>
    <div class=strip id=elements></div>

    <h3>Data</h3>
    <button class=addData>Add data</button>
    <button class=removeData>Remove element</button>
    <div class=strip id=data></div>

    </div>


    <div id=contexts>

    <h2>Contexts</h2>

    <div class=context>
    <h3>Update</h3>
    <code>update context (returned by .data())</code>
    <div class=strip id=update></div>
    </div>

    <div class=context>
    <h3>Enter</h3>
    <code>.enter()</code>
    <div class=strip id=enter></div>
    </div>

    <div class=context>
    <h3>Exit</h3>
    <code>.exit()</code>
    <div class=strip id=exit></div>
    </div>

    </div>
    <script src=join-viz.js></script>

%section.subtitle
  %h1 Code: our first data-viz


%section
  %h2 Key functions

  %p If we change data, we need a way for d3 (and us) to know it's actually referring to the same thing.

  %p Initially datums are identified by position in array - if we change order this breaks.

  %p Key fn tells d3 which of the values is a unique key.


%section
  %h2 Creating a key function

  %pre
    :preserve
      var data = [
        {"name":"jquery", data: [["dom",1], ["svg",0], ["data",0], ["open",0.7 ]]},
        {"name":"d3", data: [ ["dom",0.8], ["svg",1], ["data",1], ["open",1 ]]},
        {"name":"highcharts", data:[ ["dom",0], ["svg",1], ["data",1], ["open",0 ]]},
        {"name":"raphael", data: [["dom",0], ["svg",1], ["data",0], ["open",0.5 ]]},
        {"name":"processing", data:[ ["dom",0], ["svg",0], ["data",0.5], ["open",0.2 ]]}
      ];

      var sections = d3.select("#demo1")
        .append("div")
        .classed("graphs",true)
        .selectAll("div").data(data,function(datum) {
          return datum.name;
        });

%section
  %h2 Hierarchy

  %p We can reflect a hierarchical set of data in elements

  %pre
    :preserve
      var sections = d3.select("#demo1")
        .append("div")
        .classed("graphs",true)
        .selectAll("div").data(data,pluck("name"))

      sections.enter()
          .append("div")
          .classed("data-framework",true)
          .append("h2")
          .text(pluck("name"))
          ;

  %p In our framework comparison we had a set of frameworks each with 4 attributes.

  %p So we need a set of 5 elements each containing 4 elements.

%section
  %h2 Loading data

  %p Don't need to include jQuery - has facilities to load CSV, JSON etc

  %pre
    :preserve
      d3.csv(url,function(csv) {
        // remember to parse your data - csv is stringly typed
      });

      d3.json(url,function(tastyData) {

      });

%section
  %h2 Munging data

  %p d3 includes the JS 1.6 array methods - `filter`, `map`, `reduce` etc

  %p Similar functionality to underscore.js - `nest` for `_.groupBy` etc

%section
  %h2 Mins and maxes

  %p <code>d3.extent()</code>, <code>d3.min()</code>, <code>d3.max()</code>

  %pre
    :preserve
      var data = [{value: 45},{value: 10},{value: 50}];
      d3.extent(data,function(datum) {
        return datum.value
      });
      // [10,50]


%section.subtitle
  %h2 Code: sorting &amp; transitions


%section.subtitle
  %h2 Scales

%section
  %h2 Functional scales

  %p d3 can create our scales, so we don't need to.

  %pre
    :preserve
      var mapping = d3.scale.linear()
        .domain([SMALLEST_INPUT,LARGEST_INPUT])
        .range([SMALLEST_OUTPUT,LARGEST_OUTPUT]);

  %p Has built in colour scales that look lovely

%section
  %h2 Ranges and domains

  %p Domain is the range of values something has

  %p Range is a visual representation of that domain

  %p We map between them

  
%section
  %h2 Domain: input, range: output

  %div{style:'text-align: center'}
    %img{src:'img/scales.png'} 

%section
  %h2 First page menu

  %p Simple colour scale with steps.

  %pre
    :preserve
      var data = [0.05,0.1,0.1,0.1,0.1,0.1,0.45];

      // create scale
      var colors = d3.scale.linear().domain([0,data.length - 1])
      // clever inteporlation!
        .range(["#69C7FF","#3593E6"])
      // further config
        .clamp()

      d3.select("#menu").selectAll("li").data(data)
        .append("div")
        .style("background",function(d,i) { return colors(i) });

%section.subtitle
  %h2 Layouts

%section
  %h2 Layouts

  %p Pure data: they don't do the laying out for you

  %p Most generic part of a layout is the algorithm to decide relative sizes/positions, that's what d3 gives you.

  %p Bound to the data, accessed as if you had a `dx` and `dy` in your data.

%section#layout-demo
  %h2 Histogram

  #histogram-1

  :javascript
    onPage("layout-demo",_.once(function() {

      var randomData = d3.range(1000).map(d3.random.irwinHall(10));

      var width = 800;
      var height = 500;

      var x = d3.scale.linear()
          .domain([0, 1])
          .range([0, width]);

      var data = d3.layout.histogram()
          .bins(x.ticks(20))
          (randomData);

      var y = d3.scale.linear()
          .domain([0, d3.max(data, function(d) { return d.y; })])
          .range([height, 0]);

      var svg = d3.select("#histogram-1").append("svg")
          .attr("width", width)
          .attr("height", height);

      svg.selectAll("rect")
          .data(data)
        .enter()
          .append("rect")
          .attr("transform", function(d) { return "translate(" + x(d.x) + "," + y(d.y) + ")"; })
          .attr("width", x(data[0].dx) - 1)
          .attr("height", function(d) { return height - y(d.y); });

    }));

  .demo-code

  :javascript
    onPage("layout-demo",_.once(function() {
      revealCode("layout-demo",function(code,pre) {
        d3.select("#layout-demo .demo-code")[0][0].appendChild(pre); 
      }) 
    }));

  %style
    :sass
      #histogram-1
        float: left
        width: 28%
      #layout-demo
        .demo-code
          float: left
          width: 70%
        pre
          padding: 0
          margin: 0

%section.subtitle
  %h2{style:"font-size:2em"} Hands on time!

%script{src:"prettify.js"}
%script{src:"main.js"}
